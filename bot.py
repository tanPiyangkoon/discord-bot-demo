import discord
from elasticsearch import Elasticsearch
from discord.ext import commands
import datetime
import config
import logging
import re
from datetime import timezone

# ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Logging ‡πÄ‡∏û‡∏∑‡πà‡∏≠ Debug
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢ sanitize index name
def sanitize_index_name(name):
    return re.sub(r'[^a-z0-9_]', '_', name.lower())

# ‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Elasticsearch ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
try:
    es = Elasticsearch(
        [config.ELASTICSEARCH_HOST],
        basic_auth=(config.ELASTICSEARCH_USER, config.ELASTICSEARCH_PASSWORD),
        verify_certs=False,
        request_timeout=30  # ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å timeout ‚Üí request_timeout
    )

    if es.ping():
        logging.info("‚úÖ Connected to Elasticsearch")
    else:
        raise ConnectionError("Elasticsearch did not respond")

except Exception as e:
    logging.error(f"‚ùå Elasticsearch Connection Failed: {e}")
    es = None

# ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ö‡∏≠‡∏ó
intents = discord.Intents.default()
intents.message_content = True  
intents.members = True  
bot = commands.Bot(command_prefix="!", intents=intents)

@bot.event
async def on_ready():
    logging.info(f"‚úÖ Logged in as {bot.user}")

@bot.event
async def on_message(message):
    if message.author.bot:
        logging.info(f"ü§ñ Ignoring bot message from {message.author.name}")
        return  

    logging.info(f"üì© Message received from {message.author.name} in {message.channel.name}: {message.content}")

    # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Message ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô Embed
    text_content = message.content if message.content else "[No text content]"

    if message.embeds:
        embed_data = []

        for embed in message.embeds:
            embed_text = []
            embed_dict = embed.to_dict()

            if 'title' in embed_dict:
                embed_text.append(f"üìå Title: {embed_dict['title']}")
            if 'description' in embed_dict:
                embed_text.append(f"üìù Description: {embed_dict['description']}")
            if 'fields' in embed_dict:
                for field in embed_dict['fields']:
                    embed_text.append(f"üîπ {field['name']}: {field['value']}")
            if 'footer' in embed_dict and 'text' in embed_dict['footer']:
                embed_text.append(f"ü¶∂ Footer: {embed_dict['footer']['text']}")
            if 'author' in embed_dict and 'name' in embed_dict['author']:
                embed_text.append(f"üë§ Author: {embed_dict['author']['name']}")
            if 'url' in embed_dict:
                embed_text.append(f"üîó URL: {embed_dict['url']}")
            if 'timestamp' in embed_dict:
                embed_text.append(f"‚è± Timestamp: {embed_dict['timestamp']}")
            if 'thumbnail' in embed_dict and 'url' in embed_dict['thumbnail']:
                embed_text.append(f"üñº Thumbnail: {embed_dict['thumbnail']['url']}")
            if 'image' in embed_dict and 'url' in embed_dict['image']:
                embed_text.append(f"üñº Image: {embed_dict['image']['url']}")
            if 'video' in embed_dict and 'url' in embed_dict['video']:
                embed_text.append(f"üé• Video: {embed_dict['video']['url']}")

            if not embed_text:
                embed_text.append(f"[‚ö†Ô∏è Embed object with no common fields]\n{embed_dict}")

            logging.info(f"üîç Raw Embed Data: {embed_dict}")
            embed_data.append("\n".join(embed_text))

        text_content = "\n\n".join(embed_data)

    # ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠ Channel ‡πÄ‡∏õ‡πá‡∏ô Index ‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
    index_name = sanitize_index_name(message.channel.name)

    log_data = {
        "log_id": str(message.id),
        "user": message.author.name,
        "user_id": str(message.author.id),
        "channel": message.channel.name,
        "channel_id": str(message.channel.id),
        "text": text_content,
        "timestamp": datetime.datetime.now(timezone.utc).isoformat()
    }

    logging.info(f"üìù Log Data: {log_data}")

    # ‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ Elasticsearch ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if es is None:
        logging.error("‚ö†Ô∏è Skipping log: Elasticsearch is not connected")
        return

    # ‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ Index ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á
    try:
        if not es.indices.exists(index=index_name):
            es.indices.create(index=index_name)
            logging.info(f"üÜï Created new index: {index_name}")
    except Exception as e:
        logging.error(f"‚ö†Ô∏è Failed to check/create index: {e}")

    # ‚úÖ ‡∏™‡πà‡∏á log ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Elasticsearch
    try:
        response = es.index(index=index_name, document=log_data)
        if response and response.get("result") == "created":
            logging.info(f"üìå Log Sent to {index_name}: {log_data}")
        else:
            logging.warning(f"‚ö†Ô∏è Log may not be saved properly: {response}")
    except Exception as e:
        logging.error(f"‚ùå Failed to send log: {e}")

    # ‚úÖ ‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏à‡∏≤‡∏Å‡∏ö‡∏≠‡∏ó‡∏î‡πâ‡∏ß‡∏¢
    await bot.process_commands(message)

# ‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏±‡∏ô‡∏ö‡∏≠‡∏ó
bot.run(config.TOKEN)
